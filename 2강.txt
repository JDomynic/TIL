진수는 간혹 문제 풀 때 나올 수 있다.

프로그래밍에서의 실수float 은 근삿값
부동소수점에러
해결방법
1. print(abs(a - b) <= 1e-10)

2. import math
   print(math.isclose(a, b))

314e-2 = 314 * 0.01
지수 (제곱하는 횟수) 표현 10^
e-2 /100
e2 100

Sequence Type : 여러 개의 값들을 순서대로 나열하여 저장 (정렬X)
str, list, tuple, range
1. 순서
2. 인덱싱 - 고유한 인덱스를 가지고 있어 접근가능
3. 슬라이싱 - 인덱스 범위를 조절해 부분적인 값 추출 가능
4. 길이 - len()함수를 사용해서 개수를 구하기 가능
5. 반복 - 반복된 처리 가능
기억하자

str : 문자들의 순서가 있는 변경 불가능한 시퀀스
" or ' 중 뭘 써도 상관없다. 그러나 일관되게 사용해라
" ' ' " or \" \' 주로 \ 많이 쓴다

String Interpolation : 문자열 내에 변수나 표현식을 삽입하는 방법
f-string
f-string advanced 검색하면 사용법 나온다

slicing
[2:4], [:3], [2:], [0:5:2] = 2칸씩 점프해라, [::-1] 문자열 뒤집기 = 파이썬만의 기능

[1] = z 로 변경 불가능 -> 새로운 문자열을 만들어야한다.

list : 여러 개의 값을 순서대로 저장하는 변경 가능한 시퀀스 자료형
[], [1, 2, 3, 4, 5] : 어떠한 타입도 다 들어갈 수 있다.
리스트 안의 리스트
print(my_list[4][-1]) = !!!
print(my_list[-1][1][0]) = w
가변 
my_list[0] = 100

tuple : 리스트와 똑같지만 불변이다.
() 표기 어떠한 타입도 저장가능
my_tuple = (1,) -> ()가 없으면 연산자의 ()로 인식하여 튜플이 아니게 된다.
변경 불가능
x, y = (10, 20) 등으로 내부적인 할당에 주로 이용 (다중 할당, 전달, 그룹화) - 신경쓸 필요없다.

range : 연속된 정수 시퀀스를 생성하는 변경 불가능한 자료형
print(a_range) = range()
print(list(a_range) = [0, 2, 3, 4, 5]


Non-sequence Type
dict : key - value 쌍으로 이루어진 순서와 중복이없는 변경가능한 자료형
key는 변경불가능한 자료형만 사용 가능 (str, int, float)
value는 모든 자료형 사용 가능 - 중첩된 딕셔너리 사용가능
중괄호{}로 표기
:  , 로 구분
원칙 : key를 통해서 value에 접근

set : 순서와 중복이 없는 변경 가능한 자료형 - 집합연산용
수학에서의 집합과 동일한 연산 처리 가능
{}로 표기
set = {1, 1, 1}
print(set) = {1} 중복이 없다
인덱스가 없어서 순서가 없다.
| : 합집합,   - : 차집합,  & : 교집합  - 특이해서 쓸일은 별로 없다.

etc
None : '값이 없음'을 표현

Boolean : 참과 거짓을 표현하는 자료형 - 비교와 논리 연산자와 함께 사용

















